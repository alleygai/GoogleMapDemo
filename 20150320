@{
    ViewBag.Title = "Home Page";
}
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>

<!-- This css is to ensure that the google map contols (zoom bar etc) show and size correctly. -->
<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-color: white;
    }

    .Divleft {
        width: 20%;
        height: 600px;
        float: left;
        margin: 0;
    }

    .Divright {
        width: 80%;
        height: 600px;
        float: right;
        margin: 0;
    }
</style>

<!-- This is the div that will contain the Google Map -->
<div class="Divleft">
    <input id="startvalue" style="width:90%" placeholder="Start" />
    <input id="endvalue" style="width:90%" placeholder="End" />
    <div>
        <strong>Mode of Travel: </strong>
        <select id="selectedTravelMode" onchange="calcRoute();">
            <option value="DRIVING">Driving</option>
            <option value="WALKING">Walking</option>
            <option value="BICYCLING">Bicycling</option>
        </select>
    </div>
    <input id="SearchBtn" type="button" value="Search" class="controls" onclick="calcRoute();" />
    <div id="directionpanel" style="overflow-x:hidden;overflow-y:auto;height:400px;"></div>
</div>
<div id="map_canvas" class="Divright"></div>


@section scripts {
    <section class="scripts">

        <script type="text/javascript">

            $(document).ready(function () {
                Initialize();
            });

            // Where all the fun happens
            function Initialize() {

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                google.maps.visualRefresh = true;
                var Liverpool = new google.maps.LatLng(53.408841, -2.981397);

                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 14,
                    center: Liverpool,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                    //mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

                var defaultBounds = new google.maps.LatLngBounds(
                    new google.maps.LatLng(-33.8902, 151.1759),
                    new google.maps.LatLng(-33.8474, 151.2631));
                map.fitBounds(defaultBounds);

                //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                var startValue = (document.getElementById('startvalue'));
                var endValue = (document.getElementById('endvalue'));

                var startSearchBox = new google.maps.places.SearchBox(startValue);
                var endSearchBox = new google.maps.places.SearchBox(endValue);

                markers = [];

                // [START region_getplaces]
                // Listen for the event fired when the user selects an item from the
                // pick list. Retrieve the matching places for that item.
                google.maps.event.addListener(startSearchBox, 'places_changed', function () {
                    var places = startSearchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }
                    for (var i = 0, marker; marker = markers[i]; i++) {
                        marker.setMap(null);
                    }

                    // For each place, get the icon, place name, and location.
                    markers = [];
                    var bounds = new google.maps.LatLngBounds();
                    for (var i = 0, place; place = places[i]; i++) {
                        var image = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25)
                        };

                        // Create a marker for each place.
                        var marker = new google.maps.Marker({
                            map: map,
                            icon: image,
                            title: place.name,
                            position: place.geometry.location
                        });

                        markers.push(marker);

                        bounds.extend(place.geometry.location);
                    }

                    map.fitBounds(bounds);
                });

                google.maps.event.addListener(endSearchBox, 'places_changed', function () {
                    var places = endSearchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }
                    for (var i = 0, marker; marker = markers[i]; i++) {
                        marker.setMap(null);
                    }

                    // For each place, get the icon, place name, and location.
                    markers = [];
                    var bounds = new google.maps.LatLngBounds();
                    for (var i = 0, place; place = places[i]; i++) {
                        var image = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25)
                        };

                        // Create a marker for each place.
                        var marker = new google.maps.Marker({
                            map: map,
                            icon: image,
                            title: place.name,
                            position: place.geometry.location
                        });

                        markers.push(marker);

                        bounds.extend(place.geometry.location);
                    }

                    map.fitBounds(bounds);
                });
                // [END region_getplaces]

                // Bias the SearchBox results towards places that are within the bounds of the
                // current map's viewport.
                google.maps.event.addListener(map, 'bounds_changed', function () {
                    var bounds = map.getBounds();
                    startSearchBox.setBounds(bounds);
                    endSearchBox.setBounds(bounds);
                });

                stepDisplay = new google.maps.InfoWindow();
                directionsDisplay = new google.maps.DirectionsRenderer();
                var latlng = new google.maps.LatLng(-34.397, 150.644);

                directionsDisplay.setMap(map);
                directionsDisplay.setPanel(document.getElementById('directionpanel'));
            }

            function calcRoute() {
                var directionsService = new google.maps.DirectionsService();
                var start = document.getElementById('startvalue').value;
                var end = document.getElementById('endvalue').value;
                var selectedMode = document.getElementById("selectedTravelMode").value;
                var request = {
                    origin: start,
                    destination: end,
                    travelMode: google.maps.TravelMode[selectedMode],
                    unitSystem: google.maps.UnitSystem.METRIC
                };
                directionsService.route(request, function (result, status) {
                    if (status == google.maps.DirectionsStatus.OK) {
                        directionsDisplay.setDirections(result);
                        showSteps(result);
                    }
                });
            }

            function showSteps(directionResult) {
                var myRoute = directionResult.routes[0].legs[0];

                for (var i = 0; i < myRoute.steps.length; i++) {
                    var innermarker = new google.maps.Marker({
                        position: myRoute.steps[i].start_point,
                        map: map
                    });
                    attachInstructionText(innermarker, myRoute.steps[i].instructions);
                    markers[i] = innermarker;
                }
            }

            function attachInstructionText(waymarker, text) {
                google.maps.event.addListener(waymarker, 'click', function () {
                    stepDisplay.setContent(text);
                    stepDisplay.open(map, waymarker);
                });
            }
        </script>
    </section>
}
